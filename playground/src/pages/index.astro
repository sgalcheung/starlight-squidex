---
import Layout from "@/layouts/Layout.astro";
import { getCollection, getEntry } from "astro:content";
import { marked } from "marked";
import { SCHEMAS } from "desquidex/schemas";
import { SQUIDEX_CONTENT_SCHEMAS } from "@/content/schemas";

const app = (await getCollection(SCHEMAS.APP))?.[0];
const newsFeature = (await getCollection(SCHEMAS.FEATURES))?.[0];
const features = newsFeature.data.features.slice(0, 2);
await Promise.all(
	features.map(async (feature) => {
		feature.text = await marked.parse(feature.text);
	}),
);

// const intros = await getCollection(SQUIDEX_CONTENT_SCHEMAS.INTRODUCTIONS);

// const introductionContentDtoSchema = contentDtoSchema(introductionSchema);

// const parsedIntros = intros.map((intro) => {
//   const validationResult = introductionContentDtoSchema.safeParse(intro.data);

//   if (!validationResult.success) {
//     console.error(
//       `Validation failed for introduction ${intro.id}:`,
//       validationResult.error.issues
//     );
//   }
//   // else {
//   //   console.log(
//   //     `Validation succeeded for intro ${intro.id}:`,
//   //     validationResult.data
//   //   );
//   // }
//   return validationResult.data;
// });

// const intros = await getIntroductions();
const intros = await getCollection(SQUIDEX_CONTENT_SCHEMAS.INTRODUCTIONS);
// console.log("intros", intros);
// console.log("intros", intros[0].chapters);

// const articles = await getArticles();
// console.log("articles", articles);

// const intros2 = await getCollectionWithSchema(
//   SQUIDEX_CONTENT_SCHEMAS.INTRODUCTIONS,
//   introductionSchemaInstance
// );
// console.log("intros2", intros2);

// console.log("intros2[0].data", intros2[0].data);
// if (intros2[0].data.data) {
//   console.log("data.data.slug.iv", intros2[0].data.data.slug.iv);
//   console.log('data.links["self"]', intros2[0].data.links["self"]);
// }

// const intro = await getEntry(
//   SQUIDEX_CONTENT_SCHEMAS.INTRODUCTIONS,
//   "862331b7-4b8f-4bd7-a3e2-ebf0402154d4"
// );
// console.log(intro);
---

<Layout>
  <main class="max-w-[960px] mx-auto">
    {
      intros?.map((intro) => {
        const { data } = intro.data;
        return (
          <h2 class="text-3xl dark:text-white">
            <a
              class="text-blue-600 hover:underline hover:decoration-gray-800 focus:outline-none focus:underline focus:decoration-gray-800 dark:decoration-white"
              href={`/intro/${data.slug.iv}/`}
            >
              {data.title.iv}
            </a>
          </h2>
        );
      })
    }

    <br />
    <sction>
      <h3 class="text-2xl dark:text-white">This is the backend info:</h3>
      {
        app && (
          <p class="dark:text-white">
            <strong>App name</strong>: {app.data.name}
          </p>
        )
      }

      <strong>Change log</strong>
      {
        features.map((feature) => {
          return (
            // <li>
            //   <p class="dark:text-white">
            //     <em>{feature.name}</em>: <article set:html={feature.text} />
            //   </p>
            // </li>

            <div class="flex gap-x-3">
              <div class="relative last:after:hidden after:absolute after:top-7 after:bottom-0 after:start-3.5 after:w-px after:-translate-x-[0.5px] after:bg-gray-200 dark:after:bg-neutral-700">
                <div class="relative z-10 size-7 flex justify-center items-center">
                  <div class="size-2 rounded-full bg-gray-400 dark:bg-neutral-600" />
                </div>
              </div>

              <div class="grow pt-0.5 pb-8">
                <h3 class="flex gap-x-1.5 font-semibold text-gray-800 dark:text-white">
                  <svg
                    class="shrink-0 size-4 mt-1"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                    <polyline points="14 2 14 8 20 8" />
                    <line x1="16" x2="8" y1="13" y2="13" />
                    <line x1="16" x2="8" y1="17" y2="17" />
                    <line x1="10" x2="8" y1="9" y2="9" />
                  </svg>
                  {feature.name}
                </h3>
                <p class="mt-1 text-sm text-gray-600 dark:text-neutral-400">
                  <article set:html={feature.text} />
                </p>
                <button
                  type="button"
                  class="mt-1 -ms-1 p-1 inline-flex items-center gap-x-2 text-xs rounded-lg border border-transparent text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-400 dark:hover:bg-neutral-700 dark:focus:bg-neutral-700"
                >
                  <img
                    class="shrink-0 size-4 rounded-full"
                    src="https://squidex.io/images/logo-squared.png"
                    alt="Avatar"
                  />
                  Sebastian
                </button>
              </div>
            </div>
          );
        })
      }
    </sction>
  </main>
</Layout>
<style>
  h2,
  h3,
  h4 {
    font-size: revert;
    font-weight: revert;
  }

  a {
    color: revert;
    text-decoration: revert;
  }
</style>
