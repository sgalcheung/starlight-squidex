---
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";
import { marked } from "marked";
import { SCHEMAS } from "desquidex/schemas";
import { SQUIDEX_CONTENT_SCHEMAS } from "@/content/schemas";

const app = (await getCollection(SCHEMAS.APP))?.[0];
const newsFeature = (await getCollection(SCHEMAS.FEATURES))?.[0];
const features = newsFeature.data.features.slice(0, 2);
await Promise.all(
  features.map(async (feature: any) => {
    feature.text = await marked.parse(feature.text);
  })
);

interface SlugData {
  iv: string;
}

interface Title {
  iv: string;
}

interface IntroductionItem {
  data: {
    slug: SlugData;
    title: Title;
  };
}

interface IntroductionsResponse {
  data?: {
    items?: IntroductionItem[];
  };
}

const intros = (
  await getCollection(SQUIDEX_CONTENT_SCHEMAS.INTRODUCTIONS)
)?.[0] as IntroductionsResponse;
---

<Layout>
  <main class="max-w-[960px] mx-auto">
    {
      intros.data &&
        Array.isArray(intros.data.items) &&
        intros.data.items.map((intro) => (
          <h2>
            <a href={`/intro/${intro.data.slug.iv}/`}>{intro.data.title.iv}</a>
          </h2>
        ))
    }

    <br />
    <sction>
      <h3>This is the backend info:</h3>
      {
        app && (
          <p>
            <strong>App name</strong>: {app.data.name}
          </p>
        )
      }
      <ul>
        <strong>Change log</strong>
        {
          features.map((feature: any) => {
            return (
              <li>
                <p>
                  <em>{feature.name}</em>: <article set:html={feature.text} />
                </p>
              </li>
            );
          })
        }
      </ul>
    </sction>
  </main>
</Layout>

<style>
  h2,
  h3,
  h4 {
    font-size: revert;
    font-weight: revert;
  }

  a {
    color: revert;
    text-decoration: revert;
  }
</style>
